import { findTheCity } from "./1334";

describe("LeetCode 1334", () => {
  it("should pass test case #1", () => {
    const res = findTheCity(
      4,
      [
        [0, 1, 3],
        [1, 2, 1],
        [1, 3, 4],
        [2, 3, 1],
      ],
      4
    );
    expect(res).toBe(3);
  });
  it("should pass test case #2", () => {
    const res = findTheCity(
      5,
      [
        [0, 1, 2],
        [0, 4, 8],
        [1, 2, 3],
        [1, 4, 2],
        [2, 3, 1],
        [3, 4, 1],
      ],
      2
    );
    expect(res).toBe(0);
  });
});

// https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/comments/2539867
describe("LeetCode 1334 more tests", () => {
  it("should pass test case #1", () => {
    const res = findTheCity(
      4,
      [
        [0, 1, 3],
        [0, 2, 6],
        [0, 3, 2],
        [1, 2, 2],
        [1, 3, 5],
        [2, 3, 1],
      ],
      2
    );
    expect(res).toBe(1);
  });
  it("should pass test case #2", () => {
    const res = findTheCity(
      6,
      [
        [0, 1, 10],
        [0, 2, 1],
        [2, 3, 1],
        [1, 3, 1],
        [1, 4, 1],
        [4, 5, 10],
      ],
      20
    );
    expect(res).toBe(5);
  });
  it("should pass test case #3", () => {
    const res = findTheCity(
      6,
      [
        [0, 3, 7],
        [2, 4, 1],
        [0, 1, 5],
        [2, 3, 10],
        [1, 3, 6],
        [1, 2, 1],
      ],
      417
    );
    expect(res).toBe(5);
  });
  it("should pass test case #4", () => {
    const res = findTheCity(
      100,
      [
        [0, 1, 2],
        [1, 2, 4],
        [2, 3, 6],
        [3, 4, 8],
        [4, 5, 10],
        [5, 6, 12],
        [6, 7, 14],
        [7, 8, 16],
        [8, 9, 18],
      ],
      20
    );
    expect(res).toBe(99);
  });
  it("should pass test case #5", () => {
    const res = findTheCity(
      100,
      [
        [0, 1, 1],
        [0, 2, 1],
        [0, 3, 1],
        [0, 4, 1],
        [0, 5, 1],
        [0, 6, 1],
        [0, 7, 1],
        [0, 8, 1],
        [0, 9, 1],
        [0, 10, 1],
        [1, 2, 1],
        [1, 3, 1],
        [1, 4, 1],
        [1, 5, 1],
        [1, 6, 1],
        [1, 7, 1],
        [1, 8, 1],
        [1, 9, 1],
        [1, 10, 1],
        [2, 3, 1],
        [2, 4, 1],
        [2, 5, 1],
        [2, 6, 1],
        [2, 7, 1],
        [2, 8, 1],
        [2, 9, 1],
        [2, 10, 1],
        [3, 4, 1],
        [3, 5, 1],
        [3, 6, 1],
        [3, 7, 1],
        [3, 8, 1],
        [3, 9, 1],
        [3, 10, 1],
        [4, 5, 1],
        [4, 6, 1],
        [4, 7, 1],
        [4, 8, 1],
        [4, 9, 1],
        [4, 10, 1],
        [5, 6, 1],
        [5, 7, 1],
        [5, 8, 1],
        [5, 9, 1],
        [5, 10, 1],
        [6, 7, 1],
        [6, 8, 1],
        [6, 9, 1],
        [6, 10, 1],
        [7, 8, 1],
        [7, 9, 1],
        [7, 10, 1],
        [8, 9, 1],
        [8, 10, 1],
        [9, 10, 1],
      ],
      10
    );
    expect(res).toBe(99);
  });
  it("should pass test case #6", () => {
    const res = findTheCity(
      21,
      [
        [0, 1, 10],
        [0, 2, 7],
        [0, 3, 2],
        [0, 4, 9],
        [0, 5, 3],
        [0, 6, 8],
        [0, 7, 6],
        [0, 8, 5],
        [0, 9, 11],
        [0, 10, 4],
        [0, 11, 9],
        [0, 12, 1],
        [0, 13, 7],
        [0, 14, 8],
        [0, 15, 2],
        [0, 16, 10],
        [0, 17, 5],
        [0, 18, 6],
        [0, 19, 4],
        [0, 20, 3],
        [1, 2, 8],
        [1, 3, 7],
        [1, 4, 5],
        [1, 5, 6],
        [1, 6, 9],
        [1, 7, 3],
        [1, 8, 7],
        [1, 9, 10],
        [1, 10, 2],
        [1, 11, 8],
        [1, 12, 4],
        [1, 13, 6],
        [1, 14, 11],
        [1, 15, 5],
        [1, 16, 3],
        [1, 17, 9],
        [1, 18, 7],
        [1, 19, 12],
        [1, 20, 8],
        [2, 3, 5],
        [2, 4, 9],
        [2, 5, 7],
        [2, 6, 3],
        [2, 7, 10],
        [2, 8, 4],
        [2, 9, 6],
        [2, 10, 8],
        [2, 11, 5],
        [2, 12, 9],
        [2, 13, 2],
        [2, 14, 7],
        [2, 15, 6],
        [2, 16, 8],
        [2, 17, 5],
        [2, 18, 4],
        [2, 19, 11],
        [2, 20, 10],
        [3, 4, 6],
        [3, 5, 8],
        [3, 6, 7],
        [3, 7, 9],
        [3, 8, 2],
        [3, 9, 10],
        [3, 10, 5],
        [3, 11, 4],
        [3, 12, 8],
        [3, 13, 6],
        [3, 14, 9],
        [3, 15, 3],
        [3, 16, 7],
        [3, 17, 8],
        [3, 18, 5],
        [3, 19, 12],
        [3, 20, 4],
        [4, 5, 3],
        [4, 6, 8],
        [4, 7, 9],
        [4, 8, 2],
        [4, 9, 6],
        [4, 10, 4],
        [4, 11, 7],
        [4, 12, 10],
        [4, 13, 3],
        [4, 14, 8],
        [4, 15, 5],
        [4, 16, 6],
        [4, 17, 9],
        [4, 18, 11],
        [4, 19, 7],
        [4, 20, 2],
        [5, 6, 6],
        [5, 7, 4],
        [5, 8, 8],
        [5, 9, 3],
        [5, 10, 7],
        [5, 11, 9],
        [5, 12, 2],
        [5, 13, 6],
        [5, 14, 11],
        [5, 15, 5],
        [5, 16, 8],
        [5, 17, 3],
        [5, 18, 7],
        [5, 19, 4],
        [5, 20, 9],
        [6, 7, 8],
        [6, 8, 4],
        [6, 9, 5],
        [6, 10, 9],
        [6, 11, 7],
        [6, 12, 6],
        [6, 13, 8],
        [6, 14, 10],
        [6, 15, 3],
        [6, 16, 5],
        [6, 17, 9],
        [6, 18, 7],
        [6, 19, 4],
        [6, 20, 8],
        [7, 8, 3],
        [7, 9, 9],
        [7, 10, 6],
        [7, 11, 8],
        [7, 12, 5],
        [7, 13, 7],
        [7, 14, 10],
        [7, 15, 2],
        [7, 16, 4],
        [7, 17, 9],
        [7, 18, 11],
        [7, 19, 8],
        [7, 20, 6],
        [8, 9, 7],
        [8, 10, 4],
        [8, 11, 9],
        [8, 12, 3],
        [8, 13, 5],
        [8, 14, 6],
        [8, 15, 8],
        [8, 16, 7],
        [8, 17, 2],
        [8, 18, 4],
        [8, 19, 5],
        [8, 20, 3],
        [9, 10, 8],
        [9, 11, 6],
        [9, 12, 7],
        [9, 13, 9],
        [9, 14, 4],
        [9, 15, 3],
        [9, 16, 5],
        [9, 17, 8],
        [9, 18, 6],
        [9, 19, 7],
        [9, 20, 2],
        [10, 11, 5],
        [10, 12, 8],
        [10, 13, 3],
        [10, 14, 7],
        [10, 15, 6],
        [10, 16, 9],
        [10, 17, 4],
        [10, 18, 5],
        [10, 19, 8],
        [10, 20, 3],
        [11, 12, 6],
        [11, 13, 5],
        [11, 14, 8],
        [11, 15, 7],
        [11, 16, 2],
        [11, 17, 4],
        [11, 18, 9],
        [11, 19, 8],
        [11, 20, 6],
        [12, 13, 4],
        [12, 14, 7],
        [12, 15, 3],
        [12, 16, 8],
        [12, 17, 5],
        [12, 18, 6],
        [12, 19, 9],
        [12, 20, 7],
        [13, 14, 9],
        [13, 15, 2],
        [13, 16, 4],
        [13, 17, 7],
        [13, 18, 8],
        [13, 19, 6],
        [13, 20, 3],
        [14, 15, 8],
        [14, 16, 9],
        [14, 17, 2],
        [14, 18, 5],
        [14, 19, 7],
        [14, 20, 6],
        [15, 16, 3],
        [15, 17, 8],
        [15, 18, 9],
        [15, 19, 6],
        [15, 20, 5],
        [16, 17, 7],
        [16, 18, 4],
        [16, 19, 2],
        [16, 20, 9],
        [17, 18, 5],
        [17, 19, 7],
        [17, 20, 8],
        [18, 19, 6],
        [18, 20, 4],
        [19, 20, 8],
      ],
      3
    );
    expect(res).toBe(18);
  });
  it("should pass test case #7", () => {
    const res = findTheCity(
      100,
      [
        [1, 2, 5],
        [1, 3, 2],
        [1, 4, 8],
        [1, 5, 1],
        [1, 6, 4],
        [1, 7, 7],
        [1, 8, 3],
        [1, 9, 6],
        [1, 10, 9],
        [2, 3, 4],
        [2, 4, 6],
        [2, 5, 2],
        [2, 6, 7],
        [2, 7, 1],
        [2, 8, 5],
        [2, 9, 3],
        [2, 10, 8],
        [3, 4, 9],
        [3, 5, 6],
        [3, 6, 2],
        [3, 7, 8],
        [3, 8, 4],
        [3, 9, 7],
        [3, 10, 1],
        [4, 5, 5],
        [4, 6, 8],
        [4, 7, 2],
        [4, 8, 6],
        [4, 9, 9],
        [4, 10, 3],
        [5, 6, 7],
        [5, 7, 4],
        [5, 8, 1],
        [5, 9, 8],
        [5, 10, 2],
        [6, 7, 9],
        [6, 8, 5],
        [6, 9, 3],
        [6, 10, 6],
        [7, 8, 8],
        [7, 9, 2],
        [7, 10, 7],
        [8, 9, 6],
        [8, 10, 4],
        [9, 10, 5],
        [1, 11, 9],
        [1, 12, 4],
        [1, 13, 7],
        [1, 14, 2],
        [1, 15, 8],
        [2, 11, 5],
        [2, 12, 8],
        [2, 13, 1],
        [2, 14, 9],
        [2, 15, 4],
        [3, 11, 2],
        [3, 12, 6],
        [3, 13, 8],
        [3, 14, 7],
        [3, 15, 1],
        [4, 11, 7],
        [4, 12, 3],
        [4, 13, 9],
        [4, 14, 2],
        [4, 15, 8],
        [5, 11, 6],
        [5, 12, 4],
        [5, 13, 2],
        [5, 14, 9],
        [5, 15, 7],
        [6, 11, 8],
        [6, 12, 5],
        [6, 13, 9],
        [6, 14, 3],
        [6, 15, 4],
        [7, 11, 3],
        [7, 12, 6],
        [7, 13, 5],
        [7, 14, 9],
        [7, 15, 8],
        [8, 11, 4],
        [8, 12, 7],
        [8, 13, 1],
        [8, 14, 6],
        [8, 15, 5],
        [9, 11, 2],
        [9, 12, 8],
        [9, 13, 6],
        [9, 14, 3],
        [9, 15, 7],
        [10, 11, 9],
        [10, 12, 1],
        [10, 13, 4],
        [10, 14, 8],
        [10, 15, 6],
        [11, 12, 5],
        [11, 13, 8],
        [11, 14, 2],
        [11, 15, 9],
        [12, 13, 3],
        [12, 14, 7],
        [12, 15, 4],
        [13, 14, 6],
        [13, 15, 1],
        [14, 15, 2],
      ],
      1
    );
    expect(res).toBe(99);
  });
  it("should pass test case #8", () => {
    const res = findTheCity(
      39,
      [
        [32, 33, 6066],
        [9, 24, 4482],
        [12, 23, 1781],
        [6, 25, 1897],
        [7, 15, 8633],
        [12, 16, 2890],
        [1, 30, 349],
        [30, 31, 9738],
        [11, 33, 9791],
        [12, 34, 2418],
        [18, 21, 4112],
        [25, 29, 7258],
        [1, 3, 4596],
        [1, 8, 2224],
        [8, 17, 9142],
        [13, 23, 6498],
        [29, 38, 9590],
        [6, 28, 6956],
        [4, 31, 9774],
        [2, 30, 3967],
        [6, 19, 8528],
        [11, 13, 3068],
        [2, 36, 2987],
        [29, 37, 5395],
        [14, 21, 5175],
        [2, 4, 3214],
        [17, 29, 196],
        [9, 20, 4655],
        [19, 36, 9637],
        [15, 25, 1418],
        [6, 33, 5843],
        [22, 27, 2500],
        [13, 34, 2553],
        [0, 16, 1409],
        [20, 30, 795],
        [5, 34, 8623],
        [9, 33, 2352],
        [21, 29, 525],
        [11, 30, 1720],
        [14, 17, 7672],
        [2, 34, 8525],
        [3, 29, 6520],
        [26, 29, 847],
        [14, 18, 1323],
        [27, 33, 2360],
        [14, 23, 4009],
        [21, 37, 7194],
        [14, 38, 7686],
        [2, 25, 8244],
        [3, 21, 7009],
        [20, 27, 8794],
        [4, 32, 1865],
        [14, 20, 3548],
        [2, 3, 6502],
        [21, 28, 1577],
        [9, 15, 1030],
        [24, 32, 5566],
        [3, 5, 4979],
        [18, 26, 4109],
        [25, 33, 6545],
        [12, 36, 5506],
        [5, 33, 564],
        [13, 22, 691],
        [8, 13, 1955],
        [18, 19, 4031],
        [15, 37, 841],
        [7, 27, 318],
        [1, 25, 1626],
        [15, 18, 7242],
        [11, 12, 1446],
        [24, 26, 725],
        [5, 24, 7100],
        [7, 37, 9453],
        [20, 26, 2597],
        [2, 10, 6982],
        [19, 25, 1081],
        [1, 35, 7350],
        [4, 37, 8618],
        [4, 17, 3751],
        [16, 38, 1582],
        [8, 15, 2040],
        [18, 36, 3113],
        [2, 11, 4287],
        [13, 28, 3813],
        [0, 32, 4375],
        [3, 33, 5513],
        [19, 26, 244],
        [11, 23, 2454],
        [16, 28, 3209],
        [3, 34, 7579],
        [2, 24, 6368],
        [10, 25, 6483],
        [8, 22, 5691],
        [7, 19, 4154],
        [17, 23, 8757],
        [7, 11, 1931],
        [4, 19, 7856],
        [22, 32, 8456],
        [2, 12, 2615],
        [29, 36, 4506],
        [14, 37, 9937],
        [11, 27, 4164],
        [26, 38, 7275],
        [6, 11, 9853],
        [3, 31, 9498],
        [6, 27, 835],
        [6, 35, 9750],
        [14, 28, 2564],
        [8, 21, 2069],
        [3, 38, 6068],
        [0, 25, 2793],
        [4, 23, 5182],
        [15, 36, 6692],
        [18, 25, 8000],
        [12, 31, 8724],
        [15, 27, 146],
        [1, 7, 6611],
        [1, 36, 5780],
        [9, 23, 5532],
        [20, 28, 3097],
        [30, 38, 108],
        [15, 17, 7243],
        [6, 36, 2094],
        [32, 34, 6015],
        [11, 26, 5442],
        [16, 17, 1454],
        [18, 35, 5012],
        [28, 38, 73],
        [0, 38, 5039],
        [17, 33, 8088],
        [33, 35, 1675],
        [10, 38, 2895],
        [29, 31, 1275],
        [13, 38, 7541],
        [13, 17, 3776],
        [13, 26, 3980],
        [0, 22, 5068],
        [5, 14, 420],
        [11, 38, 3823],
        [24, 37, 6245],
        [7, 18, 745],
        [11, 22, 894],
        [14, 19, 7170],
        [0, 15, 7181],
        [10, 18, 5059],
        [0, 20, 2448],
        [8, 33, 9989],
        [28, 30, 5110],
        [6, 20, 8021],
        [5, 15, 4099],
        [3, 37, 1375],
        [8, 29, 2438],
        [5, 27, 3915],
        [16, 37, 1430],
        [10, 30, 5871],
        [8, 9, 4053],
        [23, 24, 2305],
        [23, 30, 1723],
        [11, 35, 43],
        [23, 25, 377],
        [11, 28, 949],
        [2, 27, 2637],
        [26, 36, 1856],
        [9, 25, 994],
        [7, 8, 9375],
        [19, 24, 9937],
        [6, 23, 1727],
        [3, 10, 6053],
        [22, 28, 9815],
        [12, 24, 1033],
        [17, 30, 1795],
        [2, 23, 9458],
        [0, 34, 4091],
        [21, 34, 8096],
        [1, 18, 1031],
        [20, 34, 944],
        [2, 5, 4024],
        [0, 24, 285],
        [11, 20, 8137],
        [22, 24, 4782],
        [0, 17, 8309],
        [15, 28, 3969],
        [15, 21, 2276],
        [31, 34, 5448],
        [10, 34, 6433],
        [1, 31, 1736],
        [10, 16, 8362],
        [16, 22, 4084],
        [2, 6, 7867],
        [7, 32, 1865],
        [2, 16, 3438],
        [11, 16, 1160],
        [8, 32, 3509],
        [6, 9, 1658],
        [5, 19, 2762],
        [0, 5, 4162],
        [19, 30, 2333],
        [3, 16, 3306],
        [25, 27, 3425],
        [22, 23, 8181],
        [9, 18, 3861],
        [16, 34, 7057],
        [14, 34, 9239],
        [9, 16, 1192],
        [16, 32, 8649],
        [23, 28, 2251],
        [10, 37, 9831],
        [4, 36, 1830],
        [0, 28, 4997],
        [35, 36, 1370],
        [21, 38, 1609],
        [4, 18, 2630],
        [5, 20, 8504],
        [10, 22, 1379],
        [26, 35, 9343],
        [16, 18, 2038],
        [10, 23, 491],
        [24, 38, 6111],
        [35, 38, 8084],
        [8, 20, 7034],
      ],
      6586
    );
    expect(res).toBe(38);
  });
});
